A:500$
c:0.2777$
y(A,c,v0,x):=A*%e^(-c*x/v0)/(1+%e^(-c*x/v0));

/*Poner a true para saltar las llamadas a solve (para depurar)*/
skipSolve:false$

tangente(x,v0):=''(diff(y(A,c,v0,x),x));

min_tan:tangente(0,55);
min_inclinacion:bfloat(atan(min_tan)*180/%pi);
printf(true,"(v0=55) tan: ~f, inclinacion: ~f~%", min_tan, min_inclinacion);

min_tan:tangente(0,200);
min_inclinacion:bfloat(atan(min_tan)*180/%pi);
printf(true,"(v0=200) tan: ~f, inclinacion: ~f~%", min_tan, min_inclinacion);

printf(true,"1.1. Se va a llamar a solve(490=y(A,c,55,x), puede llevar varios minutos alcanzar la solución...~%");
if not skipSolve then x0:last(float(solve(490=y(A,c,55,x))))$
printf(true, "Punto mínima inclinación: (~a~%,250)", -x0);

printf(true,"1.2~%");

plot2d(
[y(A,c,55,x),y(A,c,100,x),y(A,c,150,x),y(A,c,220,x)],
[x,-5000,5000],
[legend,"v0=55","v0=100","v0=100","v0=220"]);

printf(true,"Opcionalmente puedes ejecutar plot_inclinacion() para ver la función de la tangente~%");
plot_inclinacion():=plot2d(
[tangente(x,55),tangente(x,200)],
[x,-5000,5000],
[legend,"inclinacion v0: 55","inclinacion v0: 200"]);

printf(true,"1.3~%");
if not skipSolve then min_v0:solve(-14=tangente(0,v0))$
printf(true, "v0 minima para la maniobra: ~a~%", float(min_v0));

printf(true,"1.4");
pos_vertical:limit(tangente(x,200),x,inf);
printf(true, "posición del eje del avión respecto a la horizontal de la pista: ~f~%", pos_vertical);
